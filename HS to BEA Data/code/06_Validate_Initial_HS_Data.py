import os
import pandas as pd
import json
from main_pipeline_run import get_data_path

"""
Description: Validates the initial HS data by reading country-level trade data from 03_Map_Country_trade_data.py outputs
and performing basic analysis including total import sums and country counts.

This script:
1. Reads the country-level trade data generated by 03_Map_Country_trade_data.py
2. Calculates the sum of all imports across all countries
3. Counts the number of distinct countries in the dataset
4. Provides validation metrics for the initial HS data processing
"""

# Load data paths configuration
data_paths_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data_paths.json')
with open(data_paths_file, 'r') as f:
    data_paths = json.load(f)

# Read the country-level data from 03_Map_Country_trade_data validation output
validation_dir = os.path.join(data_paths['base_paths']['validations'], '03_Map_country_trade_data')
country_import_sums_path = os.path.join(validation_dir, '1_country_import_sums.csv')

# Check if the validation file exists
if not os.path.exists(country_import_sums_path):
    print(f"Error: Country import sums file not found at {country_import_sums_path}")
    print("Please run 03_Map_Country_trade_data.py first to generate the country-level data")
    exit(1)

# Read the country-level import data
print("Reading country-level import data...")
country_data = pd.read_csv(country_import_sums_path)

# Analysis 1: Sum of all imports
total_imports = country_data['impVal'].sum()

# Analysis 2: Count distinct countries
distinct_countries = country_data['Country'].nunique()

# Print only the requested values
print(f"Number of distinct countries: {distinct_countries}")
print(f"Total imports across all countries: ${total_imports:,.0f}")

# Read and process June 2025 data
print("\nReading June 2025 import data...")
june_2025_path = os.path.join(data_paths['base_paths']['underlying_data_root'], 'data', 'raw', 'June2025_impVals.csv')

if os.path.exists(june_2025_path):
    # Read the June 2025 data, skipping the header rows
    june_2025_data = pd.read_csv(june_2025_path, skiprows=3)
    
    # Drop Time and Commodity columns
    june_2025_data = june_2025_data.drop(columns=['Time', 'Commodity'])
    
    # Rename the customs value column to impVal
    june_2025_data = june_2025_data.rename(columns={'Customs Value (Gen) ($US)': 'impVal'})
    
    # Clean and format the impVal column (remove commas and quotes, convert to float)
    june_2025_data['impVal'] = june_2025_data['impVal'].astype(str).str.replace(',', '').str.replace('"', '').astype(float)
    
    # The World Total is already in the data, so we don't need to add it separately
    
    # Print June 2025 summary (excluding World Total row)
    june_2025_without_world = june_2025_data[june_2025_data['Country'] != 'World Total']
    june_total_imports = june_2025_without_world['impVal'].sum()
    june_distinct_countries = june_2025_without_world['Country'].nunique()
    
    print(f"June 2025 - Number of distinct countries: {june_distinct_countries}")
    print(f"June 2025 - Total imports across all countries: ${june_total_imports:,.0f}")
    
    # Add World Total row to original data before merging
    world_total_original = pd.DataFrame({
        'Country': ['World Total'],
        'impVal': [total_imports],
        'continent': ['All']
    })
    country_data_with_world = pd.concat([country_data, world_total_original], ignore_index=True)
    
    # Merge the datasets for comparison, keeping all unmatched countries from both sides
    # Rename columns to distinguish between old and new data
    country_data_for_merge = country_data_with_world[['Country', 'impVal']].rename(columns={'impVal': 'original_impVal'})
    june_2025_for_merge = june_2025_data[['Country', 'impVal']].rename(columns={'impVal': 'june_2025_impVal'})
    
    # Perform outer merge to keep all countries from both datasets
    comparison_data = pd.merge(country_data_for_merge, june_2025_for_merge, on='Country', how='outer')
    
    # Fill NaN values with 0 for countries that don't exist in one dataset
    comparison_data['original_impVal'] = comparison_data['original_impVal'].fillna(0)
    comparison_data['june_2025_impVal'] = comparison_data['june_2025_impVal'].fillna(0)
    
    # Calculate difference
    comparison_data['difference'] = comparison_data['june_2025_impVal'] - comparison_data['original_impVal']
    comparison_data['percent_change'] = ((comparison_data['june_2025_impVal'] - comparison_data['original_impVal']) / 
                                       comparison_data['original_impVal'].replace(0, 1)) * 100
    
    # Sort by absolute difference
    comparison_data = comparison_data.reindex(comparison_data['difference'].abs().sort_values(ascending=False).index)
    
    # Save comparison results
    output_dir = os.path.join(data_paths['base_paths']['validations'], '06_Validate_Initial_HS_Data')
    os.makedirs(output_dir, exist_ok=True)
    
    # Save the comparison data
    comparison_output_path = os.path.join(output_dir, 'country_import_comparison.csv')
    comparison_data.to_csv(comparison_output_path, index=False)
    
    # Save the original country data
    country_output_path = os.path.join(output_dir, 'countries_with_import_values.csv')
    country_data_sorted = country_data.sort_values('impVal', ascending=False)
    country_data_sorted.to_csv(country_output_path, index=False)
    
    # Save the June 2025 data
    june_output_path = os.path.join(output_dir, 'june_2025_import_values.csv')
    june_2025_sorted = june_2025_data.sort_values('impVal', ascending=False)
    june_2025_sorted.to_csv(june_output_path, index=False)
    
    print(f"\nComparison saved to: {comparison_output_path}")
    print(f"Original data saved to: {country_output_path}")
    print(f"June 2025 data saved to: {june_output_path}")
    
else:
    print(f"June 2025 data file not found at: {june_2025_path}")
    # Save only the original country data
    output_dir = os.path.join(data_paths['base_paths']['validations'], '06_Validate_Initial_HS_Data')
    os.makedirs(output_dir, exist_ok=True)
    
    country_output_path = os.path.join(output_dir, 'countries_with_import_values.csv')
    country_data_sorted = country_data.sort_values('impVal', ascending=False)
    country_data_sorted.to_csv(country_output_path, index=False)
    
    
## Note, there is a slight difference, but it is quite small. 